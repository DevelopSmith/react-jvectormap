/*!
 * jQuery Mousewheel 3.1.13
 * Copyright OpenJS Foundation and other contributors
 */
const loadJQueryMouseWheel = (e) =>
  (function () {
    !(function (f) {
      var e = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"],
        t =
          "onwheel" in window.document || window.document.documentMode >= 9
            ? ["wheel"]
            : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"],
        u = Array.prototype.slice,
        d,
        w;
      if (f.event.fixHooks)
        for (var i = e.length; i; )
          f.event.fixHooks[e[--i]] = f.event.mouseHooks;
      var c = (f.event.special.mousewheel = {
        version: "3.1.12",
        setup: function () {
          if (this.addEventListener)
            for (var e = t.length; e; ) this.addEventListener(t[--e], n, false);
          else this.onmousewheel = n;
          f.data(this, "mousewheel-line-height", c.getLineHeight(this));
          f.data(this, "mousewheel-page-height", c.getPageHeight(this));
        },
        teardown: function () {
          if (this.removeEventListener)
            for (var e = t.length; e; )
              this.removeEventListener(t[--e], n, false);
          else this.onmousewheel = null;
          f.removeData(this, "mousewheel-line-height");
          f.removeData(this, "mousewheel-page-height");
        },
        getLineHeight: function (e) {
          var t = f(e),
            i = t["offsetParent" in f.fn ? "offsetParent" : "parent"]();
          if (!i.length) i = f("body");
          return (
            parseInt(i.css("fontSize"), 10) ||
            parseInt(t.css("fontSize"), 10) ||
            16
          );
        },
        getPageHeight: function (e) {
          return f(e).height();
        },
        settings: { adjustOldDeltas: true, normalizeOffset: true },
      });
      function n(e) {
        var t = e || window.event,
          i = u.call(arguments, 1),
          n = 0,
          o = 0,
          l = 0,
          s = 0;
        e = f.event.fix(t);
        e.type = "mousewheel";
        if ("detail" in t) l = t.detail * -1;
        if ("wheelDelta" in t) l = t.wheelDelta;
        if ("wheelDeltaY" in t) l = t.wheelDeltaY;
        if ("wheelDeltaX" in t) o = t.wheelDeltaX * -1;
        if ("axis" in t && t.axis === t.HORIZONTAL_AXIS) {
          o = l * -1;
          l = 0;
        }
        n = l === 0 ? o : l;
        if ("deltaY" in t) {
          l = t.deltaY * -1;
          n = l;
        }
        if ("deltaX" in t) {
          o = t.deltaX;
          if (l === 0) n = o * -1;
        }
        if (l === 0 && o === 0) return;
        if (t.deltaMode === 1) {
          var a = f.data(this, "mousewheel-line-height");
          n *= a;
          l *= a;
          o *= a;
        } else if (t.deltaMode === 2) {
          var h = f.data(this, "mousewheel-page-height");
          n *= h;
          l *= h;
          o *= h;
        }
        s = Math.max(Math.abs(l), Math.abs(o));
        if (!w || s < w) {
          w = s;
          if (m(t, s)) w /= 40;
        }
        if (m(t, s)) {
          n /= 40;
          o /= 40;
          l /= 40;
        }
        n = Math[n >= 1 ? "floor" : "ceil"](n / w);
        o = Math[o >= 1 ? "floor" : "ceil"](o / w);
        l = Math[l >= 1 ? "floor" : "ceil"](l / w);
        if (c.settings.normalizeOffset && this.getBoundingClientRect) {
          var r = this.getBoundingClientRect();
          e.offsetX = e.clientX - r.left;
          e.offsetY = e.clientY - r.top;
        }
        e.deltaX = o;
        e.deltaY = l;
        e.deltaFactor = w;
        e.deltaMode = 0;
        i.unshift(e, n, o, l);
        if (d) window.clearTimeout(d);
        d = window.setTimeout(g, 200);
        return (f.event.dispatch || f.event.handle).apply(this, i);
      }
      function g() {
        w = null;
      }
      function m(e, t) {
        return (
          c.settings.adjustOldDeltas && e.type === "mousewheel" && t % 120 === 0
        );
      }
      f.fn.extend({
        mousewheel: function (e) {
          return e ? this.on("mousewheel", e) : this.trigger("mousewheel");
        },
        unmousewheel: function (e) {
          return this.off("mousewheel", e);
        },
      });
    })(e);
  })();
export { loadJQueryMouseWheel };
